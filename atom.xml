<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pollar&#39;s Blog</title>
  
  
  <link href="https://zzhy0616.github.io/atom.xml" rel="self"/>
  
  <link href="https://zzhy0616.github.io/"/>
  <updated>2020-11-07T02:45:19.611Z</updated>
  <id>https://zzhy0616.github.io/</id>
  
  <author>
    <name>Poller</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搜索集合</title>
    <link href="https://zzhy0616.github.io/2020/11/07/%E6%90%9C%E7%B4%A2%E9%9B%86%E5%90%88-1/"/>
    <id>https://zzhy0616.github.io/2020/11/07/%E6%90%9C%E7%B4%A2%E9%9B%86%E5%90%88-1/</id>
    <published>2020-11-07T02:26:25.000Z</published>
    <updated>2020-11-07T02:45:19.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特殊状态的枚举">特殊状态的枚举</h2><p>关于函数next_pumutation，可以把n个元素共n！种排列枚举出来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span>  used[MAX_N];</span><br><span class="line"><span class="keyword">int</span> perm[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成&#123;0， 1， 2 ，3， 4 ，... n- 1&#125; 的 n！序列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation</span><span class="params">(<span class="keyword">int</span> pos , <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos == n) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        对perm进行的操作</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">            perm[pos] = i;</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            permutation(pos + <span class="number">1</span>, n);</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> perm2[MAX_N];</span><br><span class="line"><span class="comment">// 按字典序生成下一个序列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation</span> <span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        perm2 [i]   =  i;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(next_permutation(perm2, perm2 + n));</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Descriptions">Descriptions:</h2><p>给定若干位十进制数，你可以通过选择一个非空子集并以某种顺序构建一个数。剩余元素可以用相同规则构建第二个数。除非构造的数恰好为0，否则不能以0打头。</p><p>举例来说，给定数字0，1，2，4，6与7，你可以写出10和2467。当然写法多样：210和764，204和176，等等。最后一对数差的绝对值为28，实际上没有其他对拥有更小的差。</p><h2 id="Input">Input</h2><p>输入第一行的数表示随后测试用例的数量。<br>对于每组测试用例，有一行至少两个不超过10的十进制数字。（十进制数字为0，1，…，9）每行输入中均无重复的数字。数字为升序给出，相隔恰好一个空格。</p><h2 id="Output">Output</h2><p>对于每组测试用例，输出一个以上述规则可获得的最小的差的绝对值在一行。</p><h2 id="Sample-Input">Sample Input</h2><p>1<br>0 1 2 4 6 7</p><h2 id="Sample-Output">Sample Output</h2><p>28</p><h1>解题思路</h1><p>所需数字需要绝对值最小，即两个数字的数位相似，故枚举即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">100010</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%c&quot;</span>, &amp;num[len++], &amp;ch);</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">abs</span>(num[<span class="number">0</span>]- num[<span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n1, n2;</span><br><span class="line">        ans = INF;</span><br><span class="line">        <span class="keyword">int</span> mid = len /<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            n1 = num[<span class="number">0</span>], n2 = num[mid];</span><br><span class="line">            <span class="keyword">if</span>(n1 == <span class="number">0</span> || n2 == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; mid; ++i)</span><br><span class="line">             n1 = n1 * <span class="number">10</span> + num[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">                n2 = n2 *<span class="number">10</span> + num[i];</span><br><span class="line">            ans = min(ans, <span class="built_in">abs</span>(n1 - n2));</span><br><span class="line">        &#125;    </span><br><span class="line">            <span class="keyword">while</span>(next_permutation(num, num + len));</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    solve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;特殊状态的枚举&quot;&gt;特殊状态的枚举&lt;/h2&gt;
&lt;p&gt;关于函数next_pumutation，可以把n个元素共n！种排列枚举出来&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>unionfind</title>
    <link href="https://zzhy0616.github.io/2020/09/20/unionfind/"/>
    <id>https://zzhy0616.github.io/2020/09/20/unionfind/</id>
    <published>2020-09-20T09:26:41.000Z</published>
    <updated>2020-11-30T10:15:59.911Z</updated>
    
    <content type="html"><![CDATA[<p>经典并查集题目<br>find（）和union操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  N = <span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Father[N], Rank[N];<span class="comment">//Father节点数据， Rank树的大小</span></span><br><span class="line"><span class="comment">// 递归find操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Father[x] == x)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Father[x] = find(Father[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getAnswer</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; B, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; E)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        Father[i] = i;</span><br><span class="line">        Rank[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序使1操作位于前</span></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m ; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(E[i] == <span class="number">1</span>)&#123;</span><br><span class="line">            swap(E[i], E[cnt]);</span><br><span class="line">            swap(A[i], A[cnt]);</span><br><span class="line">            swap(B[i], B[cnt]);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//union操作</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> setA = find(A[i]);</span><br><span class="line">        <span class="keyword">int</span> setB = find(B[i]);</span><br><span class="line">        <span class="keyword">if</span>(E[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(setA == setB)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(setA != setB)&#123;</span><br><span class="line">                <span class="comment">//使小树加入大树</span></span><br><span class="line">                <span class="keyword">if</span>(Rank[setB] &lt; Rank[setA])</span><br><span class="line">                    swap(setA, setB);</span><br><span class="line">                Father[setA] = setB;</span><br><span class="line">                <span class="keyword">if</span>(Rank[setA] == Rank[setB])</span><br><span class="line">                    Rank[setA]++;              </span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T); T--; ) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B, E;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> a, b, e;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;e);</span><br><span class="line">            A.push_back(a);</span><br><span class="line">            B.push_back(b);</span><br><span class="line">            E.push_back(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, getAnswer(n, m, A, B, E).c_str());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;经典并查集题目&lt;br&gt;
find（）和union操作&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://zzhy0616.github.io/2020/09/20/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://zzhy0616.github.io/2020/09/20/%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-09-20T09:24:43.000Z</published>
    <updated>2020-11-26T10:51:29.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的编号">二叉树的编号</h2><h3 id="题目大意">题目大意</h3><p><a href="https://uva.onlinejudge.org/external/6/p679.pdf">https://uva.onlinejudge.org/external/6/p679.pdf</a></p><h3 id="Code">Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 运算量较大的代码*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxd = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">1</span> &lt;&lt; maxd];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> D, I;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;D, &amp;I) == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(s ,<span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">        <span class="keyword">int</span> k, n = (<span class="number">1</span> &lt;&lt; D) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; I; ++i)&#123;</span><br><span class="line">            k = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">                s[k] = !s[k];</span><br><span class="line">                k = s[k] ? k*<span class="number">2</span> : k*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(k &gt; n) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, k/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//运算量较小的代码</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">每个小球都会落在根节点上，因此前两个小球必然是一个在左子树，一个在右子树，只需判断</span></span><br><span class="line"><span class="comment">小球编号的奇偶性就可以知道小球，落到根节点的左子树还是右子树。</span></span><br><span class="line"><span class="comment">以此类推只需知道该小球是第几个落在根的左右子树里，就可以知道其下一步往左走还是往右走</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;D, &amp;I) == <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; D<span class="number">-1</span>; ++i)</span><br><span class="line">    <span class="keyword">if</span>(I%<span class="number">2</span>) &#123; k = k * <span class="number">2</span>; I = (I+<span class="number">1</span>)/<span class="number">2</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        k = k*<span class="number">2</span> + <span class="number">1</span>; I /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, k);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二叉树的层次遍历">二叉树的层次遍历</h2><p>原题链接<br><a href="https://vjudge.net/problem/UVA-122">https://vjudge.net/problem/UVA-122</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1001000</span>;</span><br><span class="line"><span class="comment">//输入部分和主程序</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> have_value;<span class="comment">//是否被赋值过</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    Node *left, *right;</span><br><span class="line">    Node():have_value(<span class="literal">false</span>), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>)&#123; &#125;<span class="comment">//构造函数</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> v; </span><br><span class="line"><span class="keyword">bool</span> failed;</span><br><span class="line">Node* root;</span><br><span class="line"><span class="function">Node* <span class="title">newnode</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Node();&#125;;<span class="comment">//每次需要一个新的Node时需要申请内存</span></span><br><span class="line"><span class="comment">/* 可以用new 运算符申请空间并执行构造函数， 若返回值为NULL则空间不足申请失败*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">remove_tree</span><span class="params">(Node *u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    remove_tree(u-&gt;left);</span><br><span class="line">    remove_tree(u-&gt;right);</span><br><span class="line">    <span class="keyword">delete</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ans)</span></span>&#123;</span><br><span class="line">    ans.clear();</span><br><span class="line"><span class="built_in">queue</span>&lt;Node*&gt; q;</span><br><span class="line">    q.push(root); </span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        Node* u = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">if</span>(!u -&gt; have_value) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//有节点没有被赋值过，表明输入有误</span></span><br><span class="line">        ans.push_back(u-&gt;v);</span><br><span class="line">        <span class="keyword">if</span>(u-&gt;left != <span class="literal">NULL</span>) q.push(u-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(u-&gt;right != <span class="literal">NULL</span>) q.push(u -&gt; right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addnode</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    Node *u = root; <span class="comment">//从根节点往下走</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;L&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(u -&gt;left == <span class="literal">NULL</span>) u -&gt;left = newnode();</span><br><span class="line">            u = u -&gt; left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">             <span class="keyword">if</span>(u -&gt; right == <span class="literal">NULL</span>) u -&gt;right = newnode();</span><br><span class="line">            u = u -&gt; right;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; <span class="comment">//坑点不能忽略其他情况，如为）时</span></span><br><span class="line">    <span class="keyword">if</span>(u -&gt; have_value) failed = <span class="literal">true</span>; <span class="comment">//已经赋过值，表明输入有误</span></span><br><span class="line">    u -&gt; v = v;</span><br><span class="line">    u -&gt; have_value = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">read_input</span><span class="params">()</span></span>&#123;</span><br><span class="line">    failed = <span class="literal">false</span>;</span><br><span class="line">    remove_tree(root);</span><br><span class="line">    root = newnode();<span class="comment">//创建根节点</span></span><br><span class="line">    <span class="keyword">for</span>( ; ; )&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s) != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//整个输入结束</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(s, <span class="string">&quot;()&quot;</span>)) <span class="keyword">break</span>; <span class="comment">//读到结束标志，退出循环</span></span><br><span class="line">        <span class="built_in">sscanf</span>(&amp;s[<span class="number">1</span>],<span class="string">&quot;%d&quot;</span>, &amp;v);<span class="comment">//读入节点值</span></span><br><span class="line">        addnode(v, <span class="built_in">strchr</span>(s, <span class="string">&#x27;,&#x27;</span>) + <span class="number">1</span>);<span class="comment">//查找逗号，然后插入节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">while</span>(read_input())&#123;</span><br><span class="line">    <span class="keyword">if</span>(failed || !bfs(ans))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;not complete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator t = ans.begin(); t!=ans.end(); t++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(t != ans.end()<span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*t);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二叉树的递归遍历">二叉树的递归遍历</h2><p>题目大意<br>给出一颗二叉树的后序遍历与中序遍历，找出一个叶子使得它到根的路径上的权和最小<br>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为各个节点的权值不同且都是正整数，直接用权值作为节点编号</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">10000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> in_order[maxv], post_order[maxv], lch[maxv], rch[maxv];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">read_list</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buid</span><span class="params">(<span class="keyword">int</span> L1, <span class="keyword">int</span> R1, <span class="keyword">int</span> L2, <span class="keyword">int</span> R2)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> best, best_num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(read_list(on_order)) &#123;</span><br><span class="line">        read_list(post_order);</span><br><span class="line">        build(<span class="number">0</span>, n<span class="number">-1</span>, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">        best_num = <span class="number">1000000000</span>;</span><br><span class="line">        dfs(post_order[n<span class="number">-1</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; best &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉树的编号&quot;&gt;二叉树的编号&lt;/h2&gt;
&lt;h3 id=&quot;题目大意&quot;&gt;题目大意&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/external/6/p679.pdf&quot;&gt;https://uva.onlinejudge.org</summary>
      
    
    
    
    
    <category term="二叉树" scheme="https://zzhy0616.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>位运算</title>
    <link href="https://zzhy0616.github.io/2020/02/05/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>https://zzhy0616.github.io/2020/02/05/%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2020-02-05T12:47:34.000Z</published>
    <updated>2020-03-10T12:08:37.586Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>符号</th><th>描述</th><th>运算规则</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>两个位都为1时，结果才为1</td></tr><tr><td>|</td><td>或</td><td>两个位都为0时，结果才为0</td></tr><tr><td>^</td><td>异或</td><td>两个位相同为0，相异为1</td></tr><tr><td>~</td><td>非</td><td>0变1，1变0</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>各二进位全部左移若干位，高位丢弃，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;运算规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;与&lt;/td&gt;
&lt;td&gt;两个位都为1时，结果才为1&lt;/td&gt;
&lt;/tr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>二分答案 分组</title>
    <link href="https://zzhy0616.github.io/2020/02/03/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%E5%88%86%E7%BB%84/"/>
    <id>https://zzhy0616.github.io/2020/02/03/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%E5%88%86%E7%BB%84/</id>
    <published>2020-02-03T15:41:51.000Z</published>
    <updated>2020-11-14T14:56:26.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述">描述</h2><p>有n个正整数排成一排，你要将这些数分成m份（同一份中的数字都是连续的，不能隔开），同时数字之和最大的那一份的数字之和尽量小。</p><h2 id="输入">输入</h2><p>输入的第一行包含两个正整数n，m。</p><p>接下来一行包含n个正整数。</p><h2 id="输出">输出</h2><p>输出一个数，表示最优方案中，数字之和最大的那一份的数字之和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">include &lt;bits/stdc++.h&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断数组a是否能分成不超过m份， 满足每份都不超过d</span></span><br><span class="line"><span class="comment">// n:数组a的大小</span></span><br><span class="line"><span class="comment">//返回值：若能分成不超过m份， 返回true， 否则返回false</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> d, <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>; <span class="comment">//记录当前一份数字的和</span></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;<span class="comment">//在每一份数字之和不超过d的情况下，至少要分成的份数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; d) <span class="comment">// 如果单个元素超过d， 直接结束返回false</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        sum += a[i];<span class="comment">// 将a[i]加入当前这一份中</span></span><br><span class="line">        <span class="keyword">if</span>(sum &gt; d)&#123;</span><br><span class="line">            sum = a[i];</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125; <span class="comment">//加入a[i]后，若超过d，至少分成的数加一</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt &lt;= m; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getAnswer</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// l表示答案的下界，r表示答案的上界</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//求出答案的上界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        r += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 二分答案</span></span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid, n , m, a))</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  r + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    a.resize(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, getAnswer(n, m, a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;描述&lt;/h2&gt;
&lt;p&gt;有n个正整数排成一排，你要将这些数分成m份（同一份中的数字都是连续的，不能隔开），同时数字之和最大的那一份的数字之和尽量小。&lt;/p&gt;
&lt;h2 id=&quot;输入&quot;&gt;输入&lt;/h2&gt;
&lt;p&gt;输入的第一行包含两个正整数n，m。&lt;/p&gt;
&lt;p&gt;接下</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="https://zzhy0616.github.io/2020/01/17/%E9%93%BE%E8%A1%A8/"/>
    <id>https://zzhy0616.github.io/2020/01/17/%E9%93%BE%E8%A1%A8/</id>
    <published>2020-01-17T13:48:31.000Z</published>
    <updated>2020-01-17T13:52:37.741Z</updated>
    
    <content type="html"><![CDATA[<p>链表可以使用结构体来存储 struct slist {int prev, value, next;}list[enough];<br>也可以直接使用若干个数组来实现<br>int prev[enough], value[enough], next[enough];</p><pre><code class="language-c++">int del(int x) &#123; // 删除链表中的 x next[prev[x]] = next[x]; prev[next[x]] = prev[x]; &#125;int ins(int x, int y) &#123; // 在 x 的右边 (next) 插入y prev[next[x]] = y; next[y] = next[x]; next[x] = y; prev[y] = x;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;链表可以使用结构体来存储 struct slist {int prev, value, next;}list[enough];&lt;br&gt;
也可以直接使用若干个数组来实现&lt;br&gt;
int prev[enough], value[enough], next[enough];&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>STL</title>
    <link href="https://zzhy0616.github.io/2020/01/17/STL/"/>
    <id>https://zzhy0616.github.io/2020/01/17/STL/</id>
    <published>2020-01-17T04:23:32.000Z</published>
    <updated>2020-01-17T05:05:14.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pair-结构体">pair 结构体</h2><p>▶ 可以将两种类型融合成一种类型<br>▶ 就比如一个区间可以用两个端点表示，例如区间 [1,3] pair&lt;int, int&gt; range; range.first = 1, range.second = 3;<br>▶ 可以是不同的类型，就比如一个人有学号 12，得分 99.2 pair&lt;int, double&gt; p; p.first = 12, p.second = 99.2;<br>▶ 不难发现，使用 pair 应该将两种类型放到尖括号内，前一种类 型为 first，后一种为 second<br>▶ 可以用括号赋值，只能在定义的时用<br>pair&lt;int, char&gt; q(3, ‘a’); // 正确<br>q(4, ‘b’); // 错误，只能定义时用</p><h3 id="make-pair函数">make_pair函数</h3><p>可以将两个数融合成一个pair<br>pair&lt;int, int&gt; s = make_pair(2, 3);</p><h3 id="比较">比较</h3><p>先比较first 再比较second</p><h2 id="sort函数">sort函数</h2><p>▶ a[15] = {9, 2, 3, 1, 4, 3, 6, 5, 2, 10};<br>▶ 从小到大排序 sort(a, a + 10);<br>▶ 从大到小排序 sort(a, a + 10, greater<int>());<br>▶ 使用 greater 可能需要 #include <functional><br>▶ sort 函数前两个参数是地址，记为 l,r，排序的区间为 [l,r)<br>▶ 有 n 个区间 (l[i], r[i])，将这 n 个区间以左端点为第一关键 字，右端点按第二关键字从小到大排序<br>pair&lt;int, int&gt; range[enough]; for(int i = 1; i &lt;= n; ++i) range[i] = make_pair(l[i], r[i]); sort(range + 1, range + n + 1);<br>▶ 有 n 个区间 (l[i], r[i])，将这 n 个区间以左端点为第一关键 字，右端点按第二关键字且左端点递增，右端点递减排序<br>pair&lt;int, int&gt; range[enough]; for(int i = 1; i &lt;= n; ++i) range[i] = make_pair(l[i], -r[i]); sort(range + 1, range + n + 1);</p><h2 id="unique-去重函数">unique 去重函数</h2><p>先排序，然后把相邻的相同元素删掉<br>sort(a + 1, a + n + 1);<br>n = unique(a + 1, a + n + 1) - a - 1;</p><h2 id="lower-bound-upper-bound-函数">lower_bound, upper_bound 函数</h2><p>lower_bound(l, r, v) 可以得到在 [l,r) 内第一个大于等于 v 的 位置<br>upper_bound(l, r, v) 可以得到在 [l,r) 内第一个大于 v 的位置</p><h2 id="priority-queue">priority_queue</h2><p>priority_queue 可以快速的支持插入，查找最大值，删除最大值 的操作</p><h3 id="定义一个-priority-queue">定义一个 priority_queue</h3><p>priority_queue<int> que;</p><h3 id="插入一个-x">插入一个 x</h3><p>que.push(x);</p><h3 id="查找最大值">查找最大值</h3><p>maxvalue = que.top();</p><h3 id="删除最大值">删除最大值</h3><p>que.pop();</p><h3 id="定义最小">定义最小</h3><p>priority_queue&lt;int, vector<int>, greater<int> &gt; q</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;pair-结构体&quot;&gt;pair 结构体&lt;/h2&gt;
&lt;p&gt;▶ 可以将两种类型融合成一种类型&lt;br&gt;
▶ 就比如一个区间可以用两个端点表示，例如区间 [1,3] pair&amp;lt;int, int&amp;gt; range; range.first = 1, range.sec</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Binary</title>
    <link href="https://zzhy0616.github.io/2020/01/14/Binary/"/>
    <id>https://zzhy0616.github.io/2020/01/14/Binary/</id>
    <published>2020-01-14T12:55:10.000Z</published>
    <updated>2020-01-14T13:30:46.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分搜索（Binary-Search）">二分搜索（Binary Search）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">static</span> Rank <span class="title">binSearch</span> <span class="params">(T* s,T <span class="keyword">const</span> &amp; e, Rank lo, Rank hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( lo &lt; hi)&#123;<span class="comment">//不变性：A[0,lo) &lt;= e &lt;= A[ hi,n)</span></span><br><span class="line">        Rank mi = (lo + hi) &gt;&gt; <span class="number">1</span>;<span class="comment">//以中点为轴点，经比较后确定深入</span></span><br><span class="line">        e &lt; S[mi] ? hi = mi : lo = mi + <span class="number">1</span>; <span class="comment">//[lo,mi) 或[mi,hi)</span></span><br><span class="line">    &#125; <span class="comment">//出口时，A[lo = hi]为大于e的最小元素</span></span><br><span class="line">    <span class="keyword">return</span> --lo;<span class="comment">//故lo - 1即不大于e的元素的最大秩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二分搜索（Binary-Search）&quot;&gt;二分搜索（Binary Search）&lt;/h2&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;</summary>
      
    
    
    
    
    <category term="二分" scheme="https://zzhy0616.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记</title>
    <link href="https://zzhy0616.github.io/2020/01/14/2020.8.14%20note/"/>
    <id>https://zzhy0616.github.io/2020/01/14/2020.8.14%20note/</id>
    <published>2020-01-14T12:39:00.000Z</published>
    <updated>2020-11-14T05:37:03.839Z</updated>
    
    <content type="html"><![CDATA[<h1>Stack</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.push(<span class="number">1</span>);</span><br><span class="line">    s.push(<span class="number">2</span>);</span><br><span class="line">    s.push(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.top());</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.top());</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.top());</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>Queue</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    que.push(<span class="number">1</span>);</span><br><span class="line">    que.push(<span class="number">2</span>);</span><br><span class="line">    que.push(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, que.front());</span><br><span class="line">    que.pop();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, que.front());</span><br><span class="line">    que.pop();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, que.front());</span><br><span class="line">    que.poo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>深度优先搜索DFS</h1><p>简单来说就是一条路莽到底</p><p>部分和问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[MAX_n];</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已经从前i项得到了和sum， 然后对于i项之后的进行分支</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果前i项都计算过了则返回sum是否与k相等</span></span><br><span class="line">    <span class="keyword">if</span>(i == n) <span class="keyword">return</span> sum == k;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span>(dfs(i + <span class="number">1</span>, sum)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span>(dfs(i + <span class="number">1</span>, sum + a[i])) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无论是否加上a[i]都不能凑成k就返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dfs(<span class="number">0</span>,<span class="number">0</span>)) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Stack&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zzhy0616.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>学习笔记</title>
    <link href="https://zzhy0616.github.io/2020/01/14/2020.8.15%20note/"/>
    <id>https://zzhy0616.github.io/2020/01/14/2020.8.15%20note/</id>
    <published>2020-01-14T12:39:00.000Z</published>
    <updated>2020-08-15T14:10:01.811Z</updated>
    
    <content type="html"><![CDATA[<h1>BFS</h1><p>对于同一个状态，宽度优先搜索只经过一次，因此复杂度为O(状态数*转移的方式)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">100000000</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="keyword">char</span> maze[MAX_n][MAX_n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> sx, sy;</span><br><span class="line"><span class="keyword">int</span> gx, gy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;, dy [<span class="number">4</span>]= &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;P&gt; que;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) d[i][j] = INF;</span><br><span class="line">        <span class="comment">//将起点加入队列，并把这一地点的距离设置为0；</span></span><br><span class="line">    que.push(P(sx, sy));</span><br><span class="line">    d[sx][sy] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(que.size())&#123;</span><br><span class="line">        P p = que.front(); que.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(p.first == gx &amp;&amp; p.second == gy) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//四个方向的循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = p.first + dx[i], ny = p. second + dy[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span> &lt;= nx &amp;&amp; nx &lt; N &amp;&amp; <span class="number">0</span> &lt;= ny &amp;&amp; ny &lt;= M &amp;&amp; maze[nx][ny] != <span class="string">&#x27;#&#x27;</span> &amp;&amp; d[nx][ny] == INF)&#123;</span><br><span class="line">                que.push(P(nx, ny));</span><br><span class="line">                d[nx][ny] = d[p.first][p.second] + <span class="number">1</span>;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[gx][gy];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = bfs();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;BFS&lt;/h1&gt;
&lt;p&gt;对于同一个状态，宽度优先搜索只经过一次，因此复杂度为O(状态数*转移的方式)&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zzhy0616.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="https://zzhy0616.github.io/2020/01/14/%E9%98%9F%E5%88%97/"/>
    <id>https://zzhy0616.github.io/2020/01/14/%E9%98%9F%E5%88%97/</id>
    <published>2020-01-14T12:39:00.000Z</published>
    <updated>2020-03-23T12:48:45.382Z</updated>
    
    <content type="html"><![CDATA[<h1>描述</h1><p>实现一个队列，完成以下功能：</p><p>1.入列<br>2.出列<br>3.询问队列中位置Y是谁<br>一开始队列为空。队列中的位置从1开始（即队头位置为1）。</p><h1>输入</h1><p>第一行一个整数n，表示操作个数。</p><p>接下来n行，每行第一个数字表示操作（见描述）：</p><p>若为数字1，则接下来有一串字符串X，表示将X加入队列。<br>若为数字2，表示出列（保证队列非空），并输出出列的这个人。<br>若为数字3，则接下来有一个整数Y，表示询问队列中位置Y是谁（保证位置Y合法），并输出名字。</p><h1>输出</h1><p>将所有操作2和操作3输出，一行一个</p><h2 id="Sample-Input">Sample Input</h2><p>11<br>1 a<br>1 b<br>1 c<br>3 1<br>3 2<br>3 3<br>2<br>1 d<br>3 1<br>3 2<br>3 3</p><h2 id="Sample-Output">Sample Output</h2><p>a<br>b<br>c<br>a<br>b<br>c<br>d</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> Queue[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">int</span> head,tail;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="built_in">string</span> name)</span> </span>&#123;</span><br><span class="line">    Queue[tail++] = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Queue[head++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Queue[head + pos - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">for</span> (; n--; ) &#123;</span><br><span class="line">        <span class="keyword">int</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">            enqueue(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, dequeue().c_str());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> pos;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, query(pos).c_str());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;描述&lt;/h1&gt;
&lt;p&gt;实现一个队列，完成以下功能：&lt;/p&gt;
&lt;p&gt;1.入列&lt;br&gt;
2.出列&lt;br&gt;
3.询问队列中位置Y是谁&lt;br&gt;
一开始队列为空。队列中的位置从1开始（即队头位置为1）。&lt;/p&gt;
&lt;h1&gt;输入&lt;/h1&gt;
&lt;p&gt;第一行一个整数n，表示操作个数。&lt;/p&gt;</summary>
      
    
    
    
    <category term="基本数据结构" scheme="https://zzhy0616.github.io/categories/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>高精度</title>
    <link href="https://zzhy0616.github.io/2020/01/14/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    <id>https://zzhy0616.github.io/2020/01/14/%E9%AB%98%E7%B2%BE%E5%BA%A6/</id>
    <published>2020-01-14T12:29:44.000Z</published>
    <updated>2020-11-13T10:51:26.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高精度加法">高精度加法</h2><p>至此，就可以进行任意你想进行的运算了，首先我们来看看加法，其实上面的代码已经差不多写出来了。</p><p>高精度加法Code</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">6666</span>],b[<span class="number">6666</span>],c[<span class="number">6666</span>];</span><br><span class="line"><span class="keyword">int</span> lena,lenb,lenc;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">6666</span>],s2[<span class="number">6666</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,s1+<span class="number">1</span>,s2+<span class="number">1</span>);</span><br><span class="line">    lena=<span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line">    lenb=<span class="built_in">strlen</span>(s2+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++) a[i]=s1[lena-i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lenb;i++) b[i]=s2[lenb-i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    lenc=max(lena,lenb);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lenc;i++)&#123;</span><br><span class="line">        c[i]=c[i]+a[i]+b[i];</span><br><span class="line">        c[i+<span class="number">1</span>]=c[i]/<span class="number">10</span>;</span><br><span class="line">        c[i]=c[i]%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c[lenc+<span class="number">1</span>]&gt;<span class="number">0</span>) lenc++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=lenc;i&gt;<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高精度减法">高精度减法</h2><p>高精度减法Code</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">6666</span>],b[<span class="number">6666</span>],c[<span class="number">6666</span>];</span><br><span class="line"><span class="keyword">int</span> lena,lenb,lenc;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">6666</span>],s2[<span class="number">6666</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,s1+<span class="number">1</span>,s2+<span class="number">1</span>);</span><br><span class="line">    lena=<span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line">    lenb=<span class="built_in">strlen</span>(s2+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(lenb&gt;lena||(lena==lenb&amp;&amp;s2&gt;s1))&#123;<span class="comment">//如果第二个数比第一个数大，那么结果是负数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    swap(s1,s2);<span class="comment">//swap是C++自带函数可以直接调用</span></span><br><span class="line">    swap(lena,lenb);<span class="comment">//别忘了交换长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++) a[i]=s1[lena-i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lenb;i++) b[i]=s2[lenb-i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    lenc=max(lena,lenb);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lenc;i++)&#123;</span><br><span class="line">        c[i]=c[i]+a[i]-b[i];</span><br><span class="line">        <span class="keyword">if</span>(c[i]&lt;<span class="number">0</span>) c[i]=c[i]+<span class="number">10</span>,c[i+<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c[lenc]==<span class="number">0</span>&amp;&amp;lenc&gt;<span class="number">1</span>) lenc--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=lenc;i&gt;<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高精度乘法">高精度乘法</h2><h3 id="高精度乘以单精度">高精度乘以单精度</h3><p>高精度乘以单精度Code</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">6666</span>],b;</span><br><span class="line"><span class="keyword">int</span> lena;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">6666</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>,s1+<span class="number">1</span>,&amp;b);</span><br><span class="line">    lena=<span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++) a[i]=s1[lena-i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++) a[i]*=b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++)&#123;</span><br><span class="line">    a[i+<span class="number">1</span>]+=a[i]/<span class="number">10</span>;</span><br><span class="line">    a[i]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(a[lena+<span class="number">1</span>]&gt;<span class="number">0</span>) lena++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=lena;i&gt;<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度乘以高精度">高精度乘以高精度</h3><p>高精度乘以高精度Code</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">6666</span>],b[<span class="number">6666</span>],c[<span class="number">6666</span>];</span><br><span class="line"><span class="keyword">int</span> lena,lenb,lenc;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">6666</span>],s2[<span class="number">6666</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,s1+<span class="number">1</span>,s2+<span class="number">1</span>);</span><br><span class="line">    lena=<span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line">    lenb=<span class="built_in">strlen</span>(s2+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++) a[i]=s1[lena-i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lenb;i++) b[i]=s2[lenb-i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    lenc=lena+lenb<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lenb;j++)&#123;</span><br><span class="line">    c[i+j<span class="number">-1</span>]+=a[i]*b[j];</span><br><span class="line">    c[i+j]+=c[i+j<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">    c[i+j<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">while</span>(c[lenc+<span class="number">1</span>]&gt;<span class="number">0</span>) lenc++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=lenc;i&gt;<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高精度除法">高精度除法</h2><h3 id="高精度除以单精度">高精度除以单精度</h3><p>手动模拟一下，我们只要记录一个r，表示当前的余数，然后不断除就可以了。</p><p>高精度除以单精度Code</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">6666</span>],b,r;</span><br><span class="line"><span class="keyword">int</span> lena;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">6666</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>,s1+<span class="number">1</span>,&amp;b);</span><br><span class="line">    lena=<span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++) a[i]=s1[lena-i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=lena;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">    r=r*<span class="number">10</span>+a[i];</span><br><span class="line">    a[i]=r/b;</span><br><span class="line">    r=r%b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(a[lena]==<span class="number">0</span>&amp;&amp;lena&gt;<span class="number">1</span>) lena--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=lena;i&gt;<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度除以高精度">高精度除以高精度</h3><p>我们知道除法是乘法的逆运算，那么我们为什么不可以看做是我们现在要求一个数乘以除数等于被除数呢？那么枚举肯定是不行的，这个时候我们就要用到二分啦（二分大发好啊~），没错高精度二分商，实际上就是一个高精度加法（mid=l+r），然后高精度除以单精度（mid/2），最后再高精度减法（r=mid-1）就可以实现二分了，我们二分出来的数直接高精度乘以高精度判断一下就可以了（代码中数组中的第0个位置表示此数的长度，瞬间暴露PC党…）。</p><p>高精度除以高精度Code</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">6666</span>],b[<span class="number">6666</span>],ans[<span class="number">6666</span>],t[<span class="number">6666</span>],l[<span class="number">6666</span>],r[<span class="number">6666</span>],mid[<span class="number">6666</span>];</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">6666</span>],s2[<span class="number">6666</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>]&gt;b[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>]&lt;b[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;b[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;b[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mid[<span class="number">0</span>]=max(l[<span class="number">0</span>],r[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mid[<span class="number">0</span>];i++) mid[i]=l[i]+r[i];</span><br><span class="line">    <span class="keyword">while</span>(mid[mid[<span class="number">0</span>]+<span class="number">1</span>]&gt;<span class="number">0</span>) mid[<span class="number">0</span>]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mid[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        mid[i+<span class="number">1</span>]+=mid[i]/<span class="number">10</span>;</span><br><span class="line">        mid[i]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(mid[mid[<span class="number">0</span>]+<span class="number">1</span>]&gt;<span class="number">0</span>) mid[<span class="number">0</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">times</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span>(t));</span><br><span class="line">    t[<span class="number">0</span>]=b[<span class="number">0</span>]+mid[<span class="number">0</span>]<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mid[<span class="number">0</span>];j++)&#123;</span><br><span class="line">            t[i+j<span class="number">-1</span>]+=b[i]*mid[j];</span><br><span class="line">            t[i+j]+=t[i+j<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">            t[i+j<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(t[t[<span class="number">0</span>]+<span class="number">1</span>]&gt;<span class="number">0</span>) t[<span class="number">0</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">div</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mid[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        r=r*<span class="number">10</span>+mid[i];</span><br><span class="line">        mid[i]=r/<span class="number">2</span>;</span><br><span class="line">        r%=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(mid[mid[<span class="number">0</span>]]==<span class="number">0</span>) mid[<span class="number">0</span>]--;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=mid[<span class="number">0</span>];i++) l[i]=ans[i]=mid[i];</span><br><span class="line">    l[<span class="number">1</span>]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        l[i+<span class="number">1</span>]+=l[i]/<span class="number">10</span>;</span><br><span class="line">        l[i]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=mid[<span class="number">0</span>];i++) r[i]=mid[i];</span><br><span class="line">    r[<span class="number">1</span>]--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(r[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            r[i+<span class="number">1</span>]--;</span><br><span class="line">            r[i]+=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,s1+<span class="number">1</span>,s2+<span class="number">1</span>);</span><br><span class="line">    a[<span class="number">0</span>]=r[<span class="number">0</span>]=<span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line">    b[<span class="number">0</span>]=<span class="built_in">strlen</span>(s2+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++) a[i]=r[i]=s1[a[<span class="number">0</span>]-i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b[<span class="number">0</span>];i++) b[i]=s2[b[<span class="number">0</span>]-i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    l[<span class="number">0</span>]=ans[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(compare(l,r))&#123;</span><br><span class="line">        add();</span><br><span class="line">        div();</span><br><span class="line">        times();</span><br><span class="line">        <span class="keyword">if</span>(compare(t,a)) left();</span><br><span class="line">        <span class="keyword">else</span> right();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=ans[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高精度开平方">高精度开平方</h2><p>没错，还是二分。二分答案。利用高精度加法和高精度除以单精度可以实现二分的效果，然后直接高精度乘法乘起来再高精度比较一下大小，再用高精度减法移动一下l和r就可以了。其实这也算是高精度比较综合的做法了。码量虽然惊人，但其实高精度除以高精度改一改就好了</p><p>高精度开平方Code</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">6666</span>],b[<span class="number">6666</span>],ans[<span class="number">6666</span>],t[<span class="number">6666</span>],l[<span class="number">6666</span>],r[<span class="number">6666</span>],mid[<span class="number">6666</span>];</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">6666</span>],s2[<span class="number">6666</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>]&gt;b[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>]&lt;b[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;b[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;b[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mid[<span class="number">0</span>]=max(l[<span class="number">0</span>],r[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mid[<span class="number">0</span>];i++) mid[i]=l[i]+r[i];</span><br><span class="line">    <span class="keyword">while</span>(mid[mid[<span class="number">0</span>]+<span class="number">1</span>]&gt;<span class="number">0</span>) mid[<span class="number">0</span>]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mid[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        mid[i+<span class="number">1</span>]+=mid[i]/<span class="number">10</span>;</span><br><span class="line">        mid[i]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(mid[mid[<span class="number">0</span>]+<span class="number">1</span>]&gt;<span class="number">0</span>) mid[<span class="number">0</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">times</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span>(t));</span><br><span class="line">    t[<span class="number">0</span>]=mid[<span class="number">0</span>]+mid[<span class="number">0</span>]<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mid[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mid[<span class="number">0</span>];j++)&#123;</span><br><span class="line">            t[i+j<span class="number">-1</span>]+=mid[i]*mid[j];</span><br><span class="line">            t[i+j]+=t[i+j<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">            t[i+j<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(t[t[<span class="number">0</span>]+<span class="number">1</span>]&gt;<span class="number">0</span>) t[<span class="number">0</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">div</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mid[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        r=r*<span class="number">10</span>+mid[i];</span><br><span class="line">        mid[i]=r/<span class="number">2</span>;</span><br><span class="line">        r%=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(mid[mid[<span class="number">0</span>]]==<span class="number">0</span>) mid[<span class="number">0</span>]--;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=mid[<span class="number">0</span>];i++) l[i]=ans[i]=mid[i];</span><br><span class="line">    l[<span class="number">1</span>]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        l[i+<span class="number">1</span>]+=l[i]/<span class="number">10</span>;</span><br><span class="line">        l[i]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=mid[<span class="number">0</span>];i++) r[i]=mid[i];</span><br><span class="line">    r[<span class="number">1</span>]--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(r[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            r[i+<span class="number">1</span>]--;</span><br><span class="line">            r[i]+=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s1+<span class="number">1</span>);</span><br><span class="line">    a[<span class="number">0</span>]=r[<span class="number">0</span>]=<span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++) a[i]=r[i]=s1[a[<span class="number">0</span>]-i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    l[<span class="number">0</span>]=ans[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(compare(l,r))&#123;</span><br><span class="line">        add();</span><br><span class="line">        div();</span><br><span class="line">        times();</span><br><span class="line">        <span class="keyword">if</span>(compare(t,a)) left();</span><br><span class="line">        <span class="keyword">else</span> right();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=ans[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;高精度加法&quot;&gt;高精度加法&lt;/h2&gt;
&lt;p&gt;至此，就可以进行任意你想进行的运算了，首先我们来看看加法，其实上面的代码已经差不多写出来了。&lt;/p&gt;
&lt;p&gt;高精度加法Code&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>排序 Sorting</title>
    <link href="https://zzhy0616.github.io/2020/01/10/%E6%8E%92%E5%BA%8F%20Sorting/"/>
    <id>https://zzhy0616.github.io/2020/01/10/%E6%8E%92%E5%BA%8F%20Sorting/</id>
    <published>2020-01-10T01:55:53.000Z</published>
    <updated>2020-01-14T13:53:55.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gnomesort-Naive-Improved">Gnomesort: Naive + Improved</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">naiveGnomesort(s[], n) <span class="comment">//single loop but O(n^2)</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; )&#123;</span><br><span class="line">      <span class="keyword">if</span>(i &lt; <span class="number">1</span> || s[i<span class="number">-1</span>] &lt;= s[i]) <span class="comment">//GREEDY</span></span><br><span class="line">      i++;<span class="comment">//inefficient backtracking</span></span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        &#123;  </span><br><span class="line">            swap ( s[ i<span class="number">-1</span>], s[i]);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">improveGnomesort(s[], n)<span class="comment">//nested loops and still o(n^2) </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n ; k++) <span class="comment">//Since s[0,k) is always sorted, we can</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = k; <span class="number">0</span> &lt; i &amp;&amp; s[i<span class="number">-1</span>] &gt; s[i]; i-- ) <span class="comment">//backtrack to k and rescan</span></span><br><span class="line">    swap( s[i<span class="number">-1</span>], s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Bubblesort-Basic">Bubblesort: Basic</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="keyword">void</span> Vector&lt;T&gt;:: bubbleSort ( Rank lo, Rank hi)&#123;</span><br><span class="line">  <span class="keyword">while</span>( lo &lt; hi)</span><br><span class="line">  bubble( lo, hi--);<span class="comment">//逐趟做扫描交换</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="keyword">void</span> Vector&lt;T&gt;:: bubble( Rank lo, Rank hi)&#123;</span><br><span class="line">  <span class="keyword">while</span>(++lo &lt; hi)&#123;<span class="comment">//从左向右，逐一检查各对相邻元素</span></span><br><span class="line">    <span class="keyword">if</span>( _elem[lo<span class="number">-1</span>] &gt; _elem[lo] )<span class="comment">//若逆序</span></span><br><span class="line">      swap( _elem[lo<span class="number">-1</span>], _elem[lo]);<span class="comment">//交换</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Bubblesort-提前终止">Bubblesort: 提前终止</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="keyword">void</span> Vector&lt;T&gt;:: bubbleSort ( Rank lo, Rank hi)&#123;</span><br><span class="line">  <span class="keyword">while</span>( ! bubble( lo, hi--))<span class="comment">//逐趟做扫描交换</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="keyword">bool</span> Vector&lt;T&gt;:: bubble( Rank lo, Rank hi)&#123;</span><br><span class="line">  <span class="keyword">bool</span> sorted = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">while</span>(++lo &lt; hi)&#123;<span class="comment">//从左向右，逐一检查各对相邻元素</span></span><br><span class="line">    <span class="keyword">if</span>( _elem[lo<span class="number">-1</span>] &gt; _elem[lo] )&#123;<span class="comment">//若逆序</span></span><br><span class="line">      sorted = <span class="literal">false</span>;</span><br><span class="line">      swap( _elem[lo<span class="number">-1</span>], _elem[lo]);<span class="comment">//交换</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sorted;<span class="comment">//整体有序</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Bubblesort-跳过无效起泡">Bubblesort: 跳过无效起泡</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="keyword">void</span> Vector&lt;T&gt;:: bubbleSort ( Rank lo, Rank hi)&#123;</span><br><span class="line">  <span class="keyword">while</span>( lo &lt; ( hin = bubble( lo, hi)))<span class="comment">//逐趟做扫描交换,直至全序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="keyword">bool</span> Vector&lt;T&gt;:: bubble( Rank lo, Rank hi)&#123;</span><br><span class="line">  Rank last = lo;</span><br><span class="line">  <span class="keyword">while</span>(++lo &lt; hi)&#123;<span class="comment">//从左向右，逐一检查各对相邻元素</span></span><br><span class="line">    <span class="keyword">if</span>( _elem[lo<span class="number">-1</span>] &gt; _elem[lo] )&#123;<span class="comment">//若逆序</span></span><br><span class="line">      last = lo;<span class="comment">//更新最右侧逆序对位置记录，并</span></span><br><span class="line">      swap( _elem[lo<span class="number">-1</span>], _elem[lo]);<span class="comment">//交换</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> last;<span class="comment">//逆序对均在last以左</span></span><br></pre></td></tr></table></figure><h2 id="Selection-Sort">Selection Sort</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T,<span class="keyword">int</span> size&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T(&amp;<span class="built_in">array</span>)[size])</span><span class="comment">//数组排序模版</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)<span class="comment">//从第一个开始遍历数组size次，默认将第一个视为最小元素；</span></span><br><span class="line">    &#123;</span><br><span class="line">        T min=<span class="built_in">array</span>[i];<span class="comment">//暂时将当前元素当作最小值</span></span><br><span class="line">        <span class="keyword">int</span> k=i;<span class="comment">//记录当前地址</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;size;j++)<span class="comment">//遍历未排序元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">array</span>[j]&lt;min)<span class="comment">//如果未排序元素中有比当前值还小的</span></span><br><span class="line">            &#123;</span><br><span class="line">                min=<span class="built_in">array</span>[j];<span class="comment">//更新最小值</span></span><br><span class="line">                k=j;<span class="comment">//更新最小值地址</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k!=i)<span class="comment">//当一遍循环结束后如果最小元素不是当前值，将最小元素与当前值进行交换</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">array</span>[k]=<span class="built_in">array</span>[i];</span><br><span class="line">            <span class="built_in">array</span>[i]=min;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「liqiluan」的原创文章，遵循 CC <span class="number">4.0</span> BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/qq_39352109/article/details/88378108</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="QuickSelect">QuickSelect</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">quickSelect</span><span class="params">( Vector&lt;T&gt; &amp; A, Rank k)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(Rank lo = <span class="number">0</span>, hi = A.size() -  <span class="number">1</span>; lo &lt; hi; )&#123;</span><br><span class="line">    Rank i = lo, j = hi; T pivot = A[lo];</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">      <span class="keyword">while</span>( pivot &lt;= A[j] )&#123; j--; A[i] = A[j];&#125;</span><br><span class="line">      <span class="keyword">while</span>( A[i] &lt;= pivot ) &#123; i++; A[j] = A[i];&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A[i] = pivot;</span><br><span class="line">    <span class="keyword">if</span>( k &lt;= i ) hi = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( i &lt;= k ) lo = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序">归并排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100001</span>],temp[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bin</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    bin(l,mid);</span><br><span class="line">    bin(mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">int</span> i=l,j=mid+<span class="number">1</span>,k=l;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=r) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=a[j]) &#123;</span><br><span class="line">            temp[k]=a[i];</span><br><span class="line">            k++,i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            temp[k]=a[j];</span><br><span class="line">            k++,j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[k]=a[i];</span><br><span class="line">        k++,i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[k]=a[j];</span><br><span class="line">        k++,j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line">        a[i]=temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    bin(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原文地址：https://www.cnblogs.com/qseer/p/9419949.html</span></span><br></pre></td></tr></table></figure><h2 id="计数排序">计数排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> range 10000</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CountingSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">b[a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="keyword">while</span>(b[i]!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[cnt++]=i;</span><br><span class="line">b[i]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">clock_t</span> start,end;</span><br><span class="line">start=clock();</span><br><span class="line">freopen(<span class="string">&quot;out_arr.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;out_计数排序.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> a[range],b[range]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;range;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">CountingSort(a,b,range);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;range;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d &quot;</span>,a[i]);</span><br><span class="line"><span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">50</span>==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">end=clock();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;计数排序耗时：%dms\n&quot;</span>,(<span class="keyword">float</span>)(end-start)*<span class="number">1000.0</span>/CLOCKS_PER_SEC);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「生于忧患，死于安乐<span class="number">2017</span>」的原创文章，遵循 CC <span class="number">4.0</span> BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/qq_41325698/article/details/88095563</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Gnomesort-Naive-Improved&quot;&gt;Gnomesort: Naive + Improved&lt;/h2&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>木块问题</title>
    <link href="https://zzhy0616.github.io/2020/01/09/%E6%9C%A8%E5%9D%97%E9%97%AE%E9%A2%98/"/>
    <id>https://zzhy0616.github.io/2020/01/09/%E6%9C%A8%E5%9D%97%E9%97%AE%E9%A2%98/</id>
    <published>2020-01-09T06:35:15.000Z</published>
    <updated>2020-01-09T13:11:57.966Z</updated>
    
    <content type="html"><![CDATA[<p>输入n，得到编号为0 —- n-1的木块，分别摆放在顺序排列编号为0 – n-1的位置。现对这些木块进行操作，操作分为四种。</p><p>1、move a onto b：把木块a、b上方的木块放回各自的原位，再把a放到b上；</p><p>2、move a over b：把a上方的木块放回各自的原位，再把a放到b所在的木块的堆的上面；</p><p>3、pile a onto b：把b上方的木块放回各自的原位，再把a连同a上的木块整体移到b上；</p><p>4、pile a over b：把a连同a上方木块移到b所在的木块的堆的上面。</p><p>当输入quit时，结束操作并输出0~n-1的位置上的木块情况</p><h2 id="Sample-Input">Sample Input</h2><p>10<br>move 9 onto 1<br>move 8 over 1<br>move 7 over 1<br>move 6 over 1<br>pile 8 over 6<br>pile 8 over 5<br>move 2 over 1<br>move 4 over 9<br>quit</p><h2 id="Sample-Output">Sample Output</h2><p>0: 0<br>1: 1 9 2 4<br>2:<br>3: 3<br>4:<br>5: 5 8 7 6<br>6:<br>7:<br>8:<br>9:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pile[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//找木块a所在的pile和height， 以引用的形式返回调用者</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_block</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>&amp; p, <span class="keyword">int</span>&amp; h)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> ( p = <span class="number">0</span>; p &lt; n; p++)</span><br><span class="line"><span class="keyword">for</span> ( h = <span class="number">0</span>; h &lt; pile[p].size(); h++)</span><br><span class="line"><span class="keyword">if</span> (pile[p][h] == a) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把第p堆高度为h的木块上方的所有木块移回原位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_above</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h + <span class="number">1</span>; i &lt; pile[p].size(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> b = pile[p][i];</span><br><span class="line">pile[b].push_back(b);</span><br><span class="line">&#125;</span><br><span class="line">pile[p].resize(h + <span class="number">1</span>); <span class="comment">//只保留下标0~h的元素  .resize()改变大小</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把第p堆高度为h及其上方的木块整体移动到p2堆的顶部</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pile_onto</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> h, <span class="keyword">int</span> p2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; pile[p].size(); i++)</span><br><span class="line">pile[p2].push_back(pile[p][i]);</span><br><span class="line">pile[p].resize(h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:&quot;</span>, i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pile[i].size(); j++) <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, pile[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">string</span> s1, s2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) pile[i].push_back(i);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; a &gt;&gt; s2 &gt;&gt; b) &#123;</span><br><span class="line"><span class="keyword">int</span> pa, pb, ha, hb;</span><br><span class="line">find_block(a, pa, ha);</span><br><span class="line">find_block(b, pb, hb);</span><br><span class="line"><span class="keyword">if</span> (pa == pb) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (s2 == <span class="string">&quot;onto&quot;</span>) clear_above(pb, hb);</span><br><span class="line"><span class="keyword">if</span> (s1 == <span class="string">&quot;move&quot;</span>) clear_above(pa, ha);</span><br><span class="line">pile_onto(pa, ha, pb);</span><br><span class="line">&#125;</span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;输入n，得到编号为0 —- n-1的木块，分别摆放在顺序排列编号为0 – n-1的位置。现对这些木块进行操作，操作分为四种。&lt;/p&gt;
&lt;p&gt;1、move a onto b：把木块a、b上方的木块放回各自的原位，再把a放到b上；&lt;/p&gt;
&lt;p&gt;2、move a over b：</summary>
      
    
    
    
    
    <category term="STL" scheme="https://zzhy0616.github.io/tags/STL/"/>
    
  </entry>
  
</feed>
