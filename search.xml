<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Trie</title>
      <link href="2021/04/04/Trie/"/>
      <url>2021/04/04/Trie/</url>
      
        <content type="html"><![CDATA[<ol><li>每个单词的结束位置对应一个“单词结点”。</li><li>从根节点到每个单词结点的路径上所有字母连接而成的字符串就是该结点对应的单词。</li><li>根结点编号为0，然后把其余结点编号为从1开始的正整数</li><li>数组保存每个结点的所有子节点，用下标直接存取，还可以map。</li><li>来自于单词retrieval</li></ol><h2 id="分析：">分析：</h2><ol><li>ch[i][j]保存结点i的那个编号为j的子结点。</li><li>小写字母按照字典序编号为0, 1, 2, …，则ch[i][0]表示结点i的子结点a。子结点不存在，则ch[i][0]=0。</li><li>用sigma_size表示字符集的大小，全体小写字母时，sigma_size=26。</li><li>在单词结点上附加信息，其中val[i]表示结点i对应的附加信息。</li><li>每个字符串有一个权值，就可以把这个权值保存在val[i]中。</li><li>下面的代码中假定权值大于0，因此val[i]&gt;0当且仅当i是单词结点。</li><li>任何结点的子结点都不可能是根结点。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字母表为全体小写字母的Trie</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[maxcode][sigma_size];</span><br><span class="line">    <span class="keyword">int</span> val[maxcode];</span><br><span class="line">    <span class="keyword">int</span> sz; <span class="comment">//节点总数</span></span><br><span class="line">    Trie() &#123;sz = <span class="number">1</span>; <span class="built_in">memset</span>(ch[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span>(ch[<span class="number">0</span>]));&#125; <span class="comment">//初始时只有一个根节点</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123; <span class="keyword">return</span> c - <span class="string">&#x27;a&#x27;</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入字符串是， 附加信息为v，v必须非0，因为0代表“本结点不是单词结点”</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>, n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = idx(s[i]);</span><br><span class="line">            <span class="keyword">if</span>(!ch[u][c]) &#123; <span class="comment">// 结点不存在</span></span><br><span class="line">                <span class="built_in">memset</span>(ch[sz], <span class="number">0</span>, <span class="keyword">sizeof</span>(ch[sz]));</span><br><span class="line">                val[sz] = <span class="number">0</span>; <span class="comment">//中间结点的附加信息为0</span></span><br><span class="line">                ch[u][c] = sz++;</span><br><span class="line">                <span class="comment">//新建结点</span></span><br><span class="line">            &#125;</span><br><span class="line">            u = ch[u][c];</span><br><span class="line">            <span class="comment">//往下走</span></span><br><span class="line">        &#125;</span><br><span class="line">        val[u] = v; </span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="HDU4825-Xor-Sum-01-Trie">HDU4825 Xor Sum(01 Trie)</h2><p>HDU4825 Xor Sum(01 Trie)<br>给一个集合A，集合中包含了N个正整数(都不超过2^32)， 发起M(1≤N,M ≤ 10^5)次询问，每次询问中包含一个正整数 S ，之后，需要在集合当中找出一个正<br>整数 K ，使得 K 与 S 的异或结果最大。</p><p>分析：<br>A中所有整数中二进制表示的最高位是L = 32<br>可以将A中的所有数字的二进制从高位到低位插入到一个Tire中<br>把s也看做长度为L的二进制串，沿根节点向下遍历<br>每次尽量选择与x当前位不同的边<br>走完的路径形成的01串就是最大值</p><p>int 与 long long<br>还有位运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">typrdef <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n = <span class="number">1e5</span> + <span class="number">10</span>, WL = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie01</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> sz, ch[WL * max_n][<span class="number">2</span>];</span><br><span class="line">    LL val[WL * max_n];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ch[sz][<span class="number">0</span>] = ch[sz][<span class="number">1</span>] = <span class="number">0</span>, val[sz] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> sz++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;sz = <span class="number">0</span>, newNode();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span> <span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = WL; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = (x &gt;&gt; i) &amp; <span class="number">1</span>, &amp;c = ch[u][v];<span class="comment">//对位运算不太熟悉，只知道每个符号的意思</span></span><br><span class="line">            <span class="keyword">if</span>(!c) c = newNode();</span><br><span class="line">            u = c;</span><br><span class="line">        &#125;</span><br><span class="line">        val[u] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">query</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>  u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = WL; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = (x &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">            u  = ch[u][v ^ <span class="number">1</span>] ? ch[u][v ^ <span class="number">1</span>] : ch[u][v];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> val[u];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码与解码</title>
      <link href="2021/03/31/ac/"/>
      <url>2021/03/31/ac/</url>
      
        <content type="html"><![CDATA[<h2 id="编码与解码">编码与解码</h2><p>{a,a,b,c}组成的所有串按照字典序编号为：aabc(1)、aacb(2)、abac(3)、…、cbaa(12)，任给一个字符串，能否方便地求出它的编号？输入acab，则应输出5。不限定字母的种类和个数，输入串为S，d(S)为S的各个排列中，字典序&lt; S的个数,求解d(S)：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搜索集合</title>
      <link href="2020/11/07/%E6%90%9C%E7%B4%A2%E9%9B%86%E5%90%88-1/"/>
      <url>2020/11/07/%E6%90%9C%E7%B4%A2%E9%9B%86%E5%90%88-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="特殊状态的枚举">特殊状态的枚举</h2><p>关于函数next_pumutation，可以把n个元素共n！种排列枚举出来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span>  used[MAX_N];</span><br><span class="line"><span class="keyword">int</span> perm[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成&#123;0， 1， 2 ，3， 4 ，... n- 1&#125; 的 n！序列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation</span><span class="params">(<span class="keyword">int</span> pos , <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos == n) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        对perm进行的操作</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">            perm[pos] = i;</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            permutation(pos + <span class="number">1</span>, n);</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> perm2[MAX_N];</span><br><span class="line"><span class="comment">// 按字典序生成下一个序列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation</span> <span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        perm2 [i]   =  i;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(next_permutation(perm2, perm2 + n));</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Descriptions">Descriptions:</h2><p>给定若干位十进制数，你可以通过选择一个非空子集并以某种顺序构建一个数。剩余元素可以用相同规则构建第二个数。除非构造的数恰好为0，否则不能以0打头。</p><p>举例来说，给定数字0，1，2，4，6与7，你可以写出10和2467。当然写法多样：210和764，204和176，等等。最后一对数差的绝对值为28，实际上没有其他对拥有更小的差。</p><h2 id="Input">Input</h2><p>输入第一行的数表示随后测试用例的数量。<br>对于每组测试用例，有一行至少两个不超过10的十进制数字。（十进制数字为0，1，…，9）每行输入中均无重复的数字。数字为升序给出，相隔恰好一个空格。</p><h2 id="Output">Output</h2><p>对于每组测试用例，输出一个以上述规则可获得的最小的差的绝对值在一行。</p><h2 id="Sample-Input">Sample Input</h2><p>1<br>0 1 2 4 6 7</p><h2 id="Sample-Output">Sample Output</h2><p>28</p><h1>解题思路</h1><p>所需数字需要绝对值最小，即两个数字的数位相似，故枚举即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">100010</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%c&quot;</span>, &amp;num[len++], &amp;ch);</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">abs</span>(num[<span class="number">0</span>]- num[<span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n1, n2;</span><br><span class="line">        ans = INF;</span><br><span class="line">        <span class="keyword">int</span> mid = len /<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            n1 = num[<span class="number">0</span>], n2 = num[mid];</span><br><span class="line">            <span class="keyword">if</span>(n1 == <span class="number">0</span> || n2 == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; mid; ++i)</span><br><span class="line">             n1 = n1 * <span class="number">10</span> + num[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">                n2 = n2 *<span class="number">10</span> + num[i];</span><br><span class="line">            ans = min(ans, <span class="built_in">abs</span>(n1 - n2));</span><br><span class="line">        &#125;    </span><br><span class="line">            <span class="keyword">while</span>(next_permutation(num, num + len));</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    solve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DFS题目集合">DFS题目集合</h2><p>UVA572</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> pic[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> m, n, idx[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r &lt; <span class="number">0</span> || r &gt;= m || c &lt; <span class="number">0</span> || c &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(idx[r][c] &gt; <span class="number">0</span> ||pic[r][c] != <span class="string">&#x27;@&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    idx[r][c] = id;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> dr = <span class="number">-1</span>; dr &lt;= <span class="number">1</span>; ++dr)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> dc = <span class="number">-1</span>; dc &lt;= <span class="number">1</span>; ++dc)</span><br><span class="line">        <span class="keyword">if</span>(dr != <span class="number">0</span> || dc != <span class="number">0</span>) dfs(r + dr, c + dc, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n) == <span class="number">2</span> &amp;&amp; m &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, pic[i]);</span><br><span class="line">        <span class="built_in">memset</span>(idx, <span class="number">0</span>, <span class="keyword">sizeof</span>(idx));</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>  j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(idx[i][j] == <span class="number">0</span> &amp;&amp; pic[i][j] == <span class="string">&#x27;@&#x27;</span>) dfs(i, j, ++cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="古代象形符号Uva1103-DFS">古代象形符号Uva1103 DFS</h2><p>思维题<br>需要将两种dfs交互使用<br>观察图形可以看出根据图像符号的空白洞数量识别这个符号<br>首先需要dfs一次将所有图形旁边的点全都变为不可访问点即为-1<br>然后从每个黑点开始枚举，向四周扩展，遇到白色的块就用dfs1函数覆盖<br>否则继续第二次dfs，两次交错使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, kase, a[maxn][maxn], flage[maxn][maxn], cnt, num[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s2[<span class="number">16</span>][<span class="number">4</span>] = </span><br><span class="line">&#123;</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> s16[] = &#123; <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> Ch[<span class="number">6</span>] = &#123; <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;W&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>|| y &lt; <span class="number">0</span> || x &gt; n + <span class="number">1</span> || y &gt; m + <span class="number">1</span> || a[x][y] != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    a[x][y] = <span class="number">-1</span>;</span><br><span class="line">    dfs1(x - <span class="number">1</span>, y);</span><br><span class="line">    dfs1(x + <span class="number">1</span>, y);</span><br><span class="line">    dfs1(x, y - <span class="number">1</span>);</span><br><span class="line">    dfs1(x, y + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>|| y &lt; <span class="number">0</span> || x &gt; n + <span class="number">1</span> || y &gt; m + <span class="number">1</span> || a[x][y] == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[x][y] == <span class="number">0</span>)&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        dfs1(x, y);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[x][y] = <span class="number">-1</span>;</span><br><span class="line">    dfs2(x - <span class="number">1</span>, y);</span><br><span class="line">    dfs2(x + <span class="number">1</span>, y);</span><br><span class="line">    dfs2(x, y - <span class="number">1</span>);</span><br><span class="line">    dfs2(x, y + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) &amp;&amp; n)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="keyword">char</span> ch;</span><br><span class="line">            <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ch == s16[k])&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">4</span>; l++)</span><br><span class="line">                            a[i][++tot] = s2[k][l];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    m *= <span class="number">4</span>;</span><br><span class="line">    dfs1(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">        <span class="keyword">if</span>(a[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line">            dfs2(i, j);</span><br><span class="line">            <span class="keyword">if</span>(cnt == <span class="number">0</span>)</span><br><span class="line">            num[<span class="number">5</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(cnt == <span class="number">1</span>)</span><br><span class="line">            num[<span class="number">0</span>] ++;</span><br><span class="line">            <span class="keyword">if</span>(cnt == <span class="number">2</span>)</span><br><span class="line">            num[<span class="number">3</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(cnt == <span class="number">3</span>)</span><br><span class="line">            num[<span class="number">2</span>] ++;</span><br><span class="line">            <span class="keyword">if</span>(cnt == <span class="number">4</span>)</span><br><span class="line">            num[<span class="number">4</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(cnt == <span class="number">5</span>)</span><br><span class="line">            num[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Case %d: &quot;</span>, ++kase);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">while</span> (num[i]--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, Ch[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Abbott的复仇Uva816-BFS">Abbott的复仇Uva816 BFS</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="2020/09/20/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2020/09/20/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="二叉树的编号">二叉树的编号</h2><h3 id="题目大意">题目大意</h3><p>UVa679<br><a href="https://uva.onlinejudge.org/external/6/p679.pdf">https://uva.onlinejudge.org/external/6/p679.pdf</a></p><h3 id="Code">Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 运算量较大的代码*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxd = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">1</span> &lt;&lt; maxd];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> D, I;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;D, &amp;I) == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(s ,<span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">        <span class="keyword">int</span> k, n = (<span class="number">1</span> &lt;&lt; D) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; I; ++i)&#123;</span><br><span class="line">            k = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">                s[k] = !s[k];</span><br><span class="line">                k = s[k] ? k*<span class="number">2</span> : k*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(k &gt; n) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, k/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//运算量较小的代码</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">每个小球都会落在根节点上，因此前两个小球必然是一个在左子树，一个在右子树，只需判断</span></span><br><span class="line"><span class="comment">小球编号的奇偶性就可以知道小球，落到根节点的左子树还是右子树。</span></span><br><span class="line"><span class="comment">以此类推只需知道该小球是第几个落在根的左右子树里，就可以知道其下一步往左走还是往右走</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;D, &amp;I) == <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; D<span class="number">-1</span>; ++i)</span><br><span class="line">    <span class="keyword">if</span>(I%<span class="number">2</span>) &#123; k = k * <span class="number">2</span>; I = (I+<span class="number">1</span>)/<span class="number">2</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        k = k*<span class="number">2</span> + <span class="number">1</span>; I /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, k);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二叉树的层次遍历">二叉树的层次遍历</h2><p>UVa122<br>原题链接<br><a href="https://vjudge.net/problem/UVA-122">https://vjudge.net/problem/UVA-122</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1001000</span>;</span><br><span class="line"><span class="comment">//输入部分和主程序</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> have_value;<span class="comment">//是否被赋值过</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    Node *left, *right;</span><br><span class="line">    Node():have_value(<span class="literal">false</span>), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>)&#123; &#125;<span class="comment">//构造函数</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> v; </span><br><span class="line"><span class="keyword">bool</span> failed;</span><br><span class="line">Node* root;</span><br><span class="line"><span class="function">Node* <span class="title">newnode</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Node();&#125;;<span class="comment">//每次需要一个新的Node时需要申请内存</span></span><br><span class="line"><span class="comment">/* 可以用new 运算符申请空间并执行构造函数， 若返回值为NULL则空间不足申请失败*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">remove_tree</span><span class="params">(Node *u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    remove_tree(u-&gt;left);</span><br><span class="line">    remove_tree(u-&gt;right);</span><br><span class="line">    <span class="keyword">delete</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ans)</span></span>&#123;</span><br><span class="line">    ans.clear();</span><br><span class="line"><span class="built_in">queue</span>&lt;Node*&gt; q;</span><br><span class="line">    q.push(root); </span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        Node* u = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">if</span>(!u -&gt; have_value) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//有节点没有被赋值过，表明输入有误</span></span><br><span class="line">        ans.push_back(u-&gt;v);</span><br><span class="line">        <span class="keyword">if</span>(u-&gt;left != <span class="literal">NULL</span>) q.push(u-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(u-&gt;right != <span class="literal">NULL</span>) q.push(u -&gt; right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addnode</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    Node *u = root; <span class="comment">//从根节点往下走</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;L&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(u -&gt;left == <span class="literal">NULL</span>) u -&gt;left = newnode();</span><br><span class="line">            u = u -&gt; left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">             <span class="keyword">if</span>(u -&gt; right == <span class="literal">NULL</span>) u -&gt;right = newnode();</span><br><span class="line">            u = u -&gt; right;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; <span class="comment">//坑点不能忽略其他情况，如为）时</span></span><br><span class="line">    <span class="keyword">if</span>(u -&gt; have_value) failed = <span class="literal">true</span>; <span class="comment">//已经赋过值，表明输入有误</span></span><br><span class="line">    u -&gt; v = v;</span><br><span class="line">    u -&gt; have_value = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">read_input</span><span class="params">()</span></span>&#123;</span><br><span class="line">    failed = <span class="literal">false</span>;</span><br><span class="line">    remove_tree(root);</span><br><span class="line">    root = newnode();<span class="comment">//创建根节点</span></span><br><span class="line">    <span class="keyword">for</span>( ; ; )&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s) != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//整个输入结束</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(s, <span class="string">&quot;()&quot;</span>)) <span class="keyword">break</span>; <span class="comment">//读到结束标志，退出循环</span></span><br><span class="line">        <span class="built_in">sscanf</span>(&amp;s[<span class="number">1</span>],<span class="string">&quot;%d&quot;</span>, &amp;v);<span class="comment">//读入节点值</span></span><br><span class="line">        addnode(v, <span class="built_in">strchr</span>(s, <span class="string">&#x27;,&#x27;</span>) + <span class="number">1</span>);<span class="comment">//查找逗号，然后插入节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">while</span>(read_input())&#123;</span><br><span class="line">    <span class="keyword">if</span>(failed || !bfs(ans))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;not complete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator t = ans.begin(); t!=ans.end(); t++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(t != ans.end()<span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*t);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二叉树的递归遍历">二叉树的递归遍历</h2><p>题目大意<br>UVa839<br>给出一颗二叉树的后序遍历与中序遍历，找出一个叶子使得它到根的路径上的权和最小<br>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为各个节点的权值不同且都是正整数，直接用权值作为节点编号</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">10000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> in_order[maxv], post_order[maxv], lch[maxv], rch[maxv];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">read_list</span><span class="params">(<span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> line;</span><br><span class="line">    <span class="keyword">if</span>(!getline(<span class="built_in">cin</span>, line)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(line)</span></span>;</span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">while</span>(ss &gt;&gt; x) a[n++] = x;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把in_order[L1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buid</span><span class="params">(<span class="keyword">int</span> L1, <span class="keyword">int</span> R1, <span class="keyword">int</span> L2, <span class="keyword">int</span> R2)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> best, best_num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(read_list(on_order)) &#123;</span><br><span class="line">        read_list(post_order);</span><br><span class="line">        build(<span class="number">0</span>, n<span class="number">-1</span>, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">        best_num = <span class="number">1000000000</span>;</span><br><span class="line">        dfs(post_order[n<span class="number">-1</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; best &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Uva839 天平</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span> <span class="params">(<span class="keyword">int</span>&amp; W)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> W1, D1, W2, D2;</span><br><span class="line">    <span class="keyword">bool</span> b1 = <span class="literal">true</span>, b2 = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; W1 &gt;&gt; D1 &gt;&gt; W2 &gt;&gt; D2;</span><br><span class="line">    <span class="keyword">if</span>(!W1) b1 = solve(W1);</span><br><span class="line">    <span class="keyword">if</span>(!W2) b2 + solve(W2);</span><br><span class="line">    W = W1 + W2;</span><br><span class="line">    <span class="keyword">return</span> b1 &amp;&amp; b2 &amp;&amp; (W1 * D1 == W2 * D2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, W;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(solve(W)) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(T) <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>UVa699</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10005</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v; <span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">    <span class="keyword">if</span>(v == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    sum[p] += v;</span><br><span class="line">    build(p - <span class="number">1</span>);</span><br><span class="line">    build(p + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v; <span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">    <span class="keyword">if</span>(v == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">memset</span>(sum ,<span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="keyword">int</span> pos = maxn/<span class="number">2</span>;</span><br><span class="line">    sum[pos] = v;</span><br><span class="line">    build(pos - <span class="number">1</span>);</span><br><span class="line">    build(pos + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> kase = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(init())&#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum[p] == <span class="number">0</span>) p++;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; ++kase &lt;&lt;<span class="string">&quot;:\n&quot;</span> &lt;&lt; sum[p++];</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> len = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1024</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> buf[len][len], cnt;</span><br><span class="line"><span class="comment">//w为黑色像素的大小</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s, <span class="keyword">int</span>&amp; p, <span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = s[p++];</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">&#x27;p&#x27;</span>)&#123;</span><br><span class="line">        draw(s, p, r, c+w/<span class="number">2</span>, w/<span class="number">2</span>);<span class="comment">//1</span></span><br><span class="line">        draw(s, p, r, c, w/<span class="number">2</span>);<span class="comment">//2</span></span><br><span class="line">        draw(s, p, r+w/<span class="number">2</span>, c, w/<span class="number">2</span>);<span class="comment">//3</span></span><br><span class="line">        draw(s, p, r+w/<span class="number">2</span>, c+w/<span class="number">2</span>, w/<span class="number">2</span>);<span class="comment">//4</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt; r+w; ++i)</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt; c+w; ++j)</span><br><span class="line">          <span class="keyword">if</span>(buf[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">              buf[i][j] = <span class="number">1</span>; cnt++;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">            <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">            draw(s, p, <span class="number">0</span>, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;There are %d black pixels.\n&quot;</span>, cnt);                             </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="2020/02/05/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>2020/02/05/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><table><thead><tr><th>符号</th><th>描述</th><th>运算规则</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>两个位都为1时，结果才为1</td></tr><tr><td>|</td><td>或</td><td>两个位都为0时，结果才为0</td></tr><tr><td>^</td><td>异或</td><td>两个位相同为0，相异为1</td></tr><tr><td>~</td><td>非</td><td>0变1，1变0</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>各二进位全部左移若干位，高位丢弃，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移</td></tr></tbody></table><h1>&amp;</h1><h2 id="清零">清零</h2><p>如果想将一个单元清零，与一个各位都为零的数值</p><h2 id="取一个数的指定位">取一个数的指定位</h2><p>如取100001000的低四位，需要与Y（低四位都是1其余位为0）</p><h1>|</h1><p>对一个数据的某些位设置为1<br>X = 1000001000 ，设置X低四位全为1，Y （低四位为1，其余位为0）<br>X | Y</p><h1>^</h1><h2 id="使一个数的最低为为0">使一个数的最低为为0</h2><p>a ^ ~1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二分答案 分组</title>
      <link href="2020/02/03/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%E5%88%86%E7%BB%84/"/>
      <url>2020/02/03/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%E5%88%86%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="描述">描述</h2><p>有n个正整数排成一排，你要将这些数分成m份（同一份中的数字都是连续的，不能隔开），同时数字之和最大的那一份的数字之和尽量小。</p><h2 id="输入">输入</h2><p>输入的第一行包含两个正整数n，m。</p><p>接下来一行包含n个正整数。</p><h2 id="输出">输出</h2><p>输出一个数，表示最优方案中，数字之和最大的那一份的数字之和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">include &lt;bits/stdc++.h&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断数组a是否能分成不超过m份， 满足每份都不超过d</span></span><br><span class="line"><span class="comment">// n:数组a的大小</span></span><br><span class="line"><span class="comment">//返回值：若能分成不超过m份， 返回true， 否则返回false</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> d, <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>; <span class="comment">//记录当前一份数字的和</span></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;<span class="comment">//在每一份数字之和不超过d的情况下，至少要分成的份数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; d) <span class="comment">// 如果单个元素超过d， 直接结束返回false</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        sum += a[i];<span class="comment">// 将a[i]加入当前这一份中</span></span><br><span class="line">        <span class="keyword">if</span>(sum &gt; d)&#123;</span><br><span class="line">            sum = a[i];</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125; <span class="comment">//加入a[i]后，若超过d，至少分成的数加一</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt &lt;= m; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getAnswer</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// l表示答案的下界，r表示答案的上界</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//求出答案的上界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        r += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 二分答案</span></span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid, n , m, a))</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  r + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    a.resize(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, getAnswer(n, m, a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="2020/01/17/%E9%93%BE%E8%A1%A8/"/>
      <url>2020/01/17/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>链表可以使用结构体来存储 struct slist {int prev, value, next;}list[enough];<br>也可以直接使用若干个数组来实现<br>int prev[enough], value[enough], next[enough];</p><pre><code class="language-c++">int del(int x) &#123; // 删除链表中的 x next[prev[x]] = next[x]; prev[next[x]] = prev[x]; &#125;int ins(int x, int y) &#123; // 在 x 的右边 (next) 插入y prev[next[x]] = y; next[y] = next[x]; next[x] = y; prev[y] = x;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="2020/01/17/STL/"/>
      <url>2020/01/17/STL/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="pair-结构体">pair 结构体</h2><p>▶ 可以将两种类型融合成一种类型<br>▶ 就比如一个区间可以用两个端点表示，例如区间 [1,3] pair&lt;int, int&gt; range; range.first = 1, range.second = 3;<br>▶ 可以是不同的类型，就比如一个人有学号 12，得分 99.2 pair&lt;int, double&gt; p; p.first = 12, p.second = 99.2;<br>▶ 不难发现，使用 pair 应该将两种类型放到尖括号内，前一种类 型为 first，后一种为 second<br>▶ 可以用括号赋值，只能在定义的时用<br>pair&lt;int, char&gt; q(3, ‘a’); // 正确<br>q(4, ‘b’); // 错误，只能定义时用</p><h3 id="make-pair函数">make_pair函数</h3><p>可以将两个数融合成一个pair<br>pair&lt;int, int&gt; s = make_pair(2, 3);</p><h3 id="比较">比较</h3><p>先比较first 再比较second</p><h2 id="sort函数">sort函数</h2><p>▶ a[15] = {9, 2, 3, 1, 4, 3, 6, 5, 2, 10};<br>▶ 从小到大排序 sort(a, a + 10);<br>▶ 从大到小排序 sort(a, a + 10, greater<int>());<br>▶ 使用 greater 可能需要 #include <functional><br>▶ sort 函数前两个参数是地址，记为 l,r，排序的区间为 [l,r)<br>▶ 有 n 个区间 (l[i], r[i])，将这 n 个区间以左端点为第一关键 字，右端点按第二关键字从小到大排序<br>pair&lt;int, int&gt; range[enough]; for(int i = 1; i &lt;= n; ++i) range[i] = make_pair(l[i], r[i]); sort(range + 1, range + n + 1);<br>▶ 有 n 个区间 (l[i], r[i])，将这 n 个区间以左端点为第一关键 字，右端点按第二关键字且左端点递增，右端点递减排序<br>pair&lt;int, int&gt; range[enough]; for(int i = 1; i &lt;= n; ++i) range[i] = make_pair(l[i], -r[i]); sort(range + 1, range + n + 1);</p><h2 id="unique-去重函数">unique 去重函数</h2><p>先排序，然后把相邻的相同元素删掉<br>sort(a + 1, a + n + 1);<br>n = unique(a + 1, a + n + 1) - a - 1;</p><h2 id="lower-bound-upper-bound-函数">lower_bound, upper_bound 函数</h2><p>lower_bound(l, r, v) 可以得到在 [l,r) 内第一个大于等于 v 的 位置<br>upper_bound(l, r, v) 可以得到在 [l,r) 内第一个大于 v 的位置</p><h2 id="priority-queue">priority_queue</h2><p>priority_queue 可以快速的支持插入，查找最大值，删除最大值 的操作</p><h3 id="定义一个-priority-queue">定义一个 priority_queue</h3><p>priority_queue<int> que;</p><h3 id="插入一个-x">插入一个 x</h3><p>que.push(x);</p><h3 id="查找最大值">查找最大值</h3><p>maxvalue = que.top();</p><h3 id="删除最大值">删除最大值</h3><p>que.pop();</p><h3 id="定义最小">定义最小</h3><p>priority_queue&lt;int, vector<int>, greater<int> &gt; q</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Binary</title>
      <link href="2020/01/14/Binary/"/>
      <url>2020/01/14/Binary/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="二分搜索（Binary-Search）">二分搜索（Binary Search）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">static</span> Rank <span class="title">binSearch</span> <span class="params">(T* s,T <span class="keyword">const</span> &amp; e, Rank lo, Rank hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( lo &lt; hi)&#123;<span class="comment">//不变性：A[0,lo) &lt;= e &lt;= A[ hi,n)</span></span><br><span class="line">        Rank mi = (lo + hi) &gt;&gt; <span class="number">1</span>;<span class="comment">//以中点为轴点，经比较后确定深入</span></span><br><span class="line">        e &lt; S[mi] ? hi = mi : lo = mi + <span class="number">1</span>; <span class="comment">//[lo,mi) 或[mi,hi)</span></span><br><span class="line">    &#125; <span class="comment">//出口时，A[lo = hi]为大于e的最小元素</span></span><br><span class="line">    <span class="keyword">return</span> --lo;<span class="comment">//故lo - 1即不大于e的元素的最大秩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记</title>
      <link href="2020/01/14/2020.8.14%20note/"/>
      <url>2020/01/14/2020.8.14%20note/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1>Stack</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.push(<span class="number">1</span>);</span><br><span class="line">    s.push(<span class="number">2</span>);</span><br><span class="line">    s.push(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.top());</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.top());</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.top());</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>Queue</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    que.push(<span class="number">1</span>);</span><br><span class="line">    que.push(<span class="number">2</span>);</span><br><span class="line">    que.push(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, que.front());</span><br><span class="line">    que.pop();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, que.front());</span><br><span class="line">    que.pop();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, que.front());</span><br><span class="line">    que.poo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>深度优先搜索DFS</h1><p>简单来说就是一条路莽到底</p><p>部分和问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[MAX_n];</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已经从前i项得到了和sum， 然后对于i项之后的进行分支</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果前i项都计算过了则返回sum是否与k相等</span></span><br><span class="line">    <span class="keyword">if</span>(i == n) <span class="keyword">return</span> sum == k;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span>(dfs(i + <span class="number">1</span>, sum)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span>(dfs(i + <span class="number">1</span>, sum + a[i])) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无论是否加上a[i]都不能凑成k就返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dfs(<span class="number">0</span>,<span class="number">0</span>)) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记</title>
      <link href="2020/01/14/2020.8.15%20note/"/>
      <url>2020/01/14/2020.8.15%20note/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1>BFS</h1><p>对于同一个状态，宽度优先搜索只经过一次，因此复杂度为O(状态数*转移的方式)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">100000000</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="keyword">char</span> maze[MAX_n][MAX_n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> sx, sy;</span><br><span class="line"><span class="keyword">int</span> gx, gy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;, dy [<span class="number">4</span>]= &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;P&gt; que;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) d[i][j] = INF;</span><br><span class="line">        <span class="comment">//将起点加入队列，并把这一地点的距离设置为0；</span></span><br><span class="line">    que.push(P(sx, sy));</span><br><span class="line">    d[sx][sy] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(que.size())&#123;</span><br><span class="line">        P p = que.front(); que.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(p.first == gx &amp;&amp; p.second == gy) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//四个方向的循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = p.first + dx[i], ny = p. second + dy[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span> &lt;= nx &amp;&amp; nx &lt; N &amp;&amp; <span class="number">0</span> &lt;= ny &amp;&amp; ny &lt;= M &amp;&amp; maze[nx][ny] != <span class="string">&#x27;#&#x27;</span> &amp;&amp; d[nx][ny] == INF)&#123;</span><br><span class="line">                que.push(P(nx, ny));</span><br><span class="line">                d[nx][ny] = d[p.first][p.second] + <span class="number">1</span>;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[gx][gy];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = bfs();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>队列</title>
      <link href="2020/01/14/%E9%98%9F%E5%88%97/"/>
      <url>2020/01/14/%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1>描述</h1><p>实现一个队列，完成以下功能：</p><p>1.入列<br>2.出列<br>3.询问队列中位置Y是谁<br>一开始队列为空。队列中的位置从1开始（即队头位置为1）。</p><h1>输入</h1><p>第一行一个整数n，表示操作个数。</p><p>接下来n行，每行第一个数字表示操作（见描述）：</p><p>若为数字1，则接下来有一串字符串X，表示将X加入队列。<br>若为数字2，表示出列（保证队列非空），并输出出列的这个人。<br>若为数字3，则接下来有一个整数Y，表示询问队列中位置Y是谁（保证位置Y合法），并输出名字。</p><h1>输出</h1><p>将所有操作2和操作3输出，一行一个</p><h2 id="Sample-Input">Sample Input</h2><p>11<br>1 a<br>1 b<br>1 c<br>3 1<br>3 2<br>3 3<br>2<br>1 d<br>3 1<br>3 2<br>3 3</p><h2 id="Sample-Output">Sample Output</h2><p>a<br>b<br>c<br>a<br>b<br>c<br>d</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> Queue[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">int</span> head,tail;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="built_in">string</span> name)</span> </span>&#123;</span><br><span class="line">    Queue[tail++] = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Queue[head++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Queue[head + pos - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">for</span> (; n--; ) &#123;</span><br><span class="line">        <span class="keyword">int</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">            enqueue(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, dequeue().c_str());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> pos;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, query(pos).c_str());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基本数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>排序 Sorting</title>
      <link href="2020/01/10/%E6%8E%92%E5%BA%8F%20Sorting/"/>
      <url>2020/01/10/%E6%8E%92%E5%BA%8F%20Sorting/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Gnomesort-Naive-Improved">Gnomesort: Naive + Improved</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">naiveGnomesort(s[], n) <span class="comment">//single loop but O(n^2)</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; )&#123;</span><br><span class="line">      <span class="keyword">if</span>(i &lt; <span class="number">1</span> || s[i<span class="number">-1</span>] &lt;= s[i]) <span class="comment">//GREEDY</span></span><br><span class="line">      i++;<span class="comment">//inefficient backtracking</span></span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        &#123;  </span><br><span class="line">            swap ( s[ i<span class="number">-1</span>], s[i]);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">improveGnomesort(s[], n)<span class="comment">//nested loops and still o(n^2) </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n ; k++) <span class="comment">//Since s[0,k) is always sorted, we can</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = k; <span class="number">0</span> &lt; i &amp;&amp; s[i<span class="number">-1</span>] &gt; s[i]; i-- ) <span class="comment">//backtrack to k and rescan</span></span><br><span class="line">    swap( s[i<span class="number">-1</span>], s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Bubblesort-Basic">Bubblesort: Basic</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="keyword">void</span> Vector&lt;T&gt;:: bubbleSort ( Rank lo, Rank hi)&#123;</span><br><span class="line">  <span class="keyword">while</span>( lo &lt; hi)</span><br><span class="line">  bubble( lo, hi--);<span class="comment">//逐趟做扫描交换</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="keyword">void</span> Vector&lt;T&gt;:: bubble( Rank lo, Rank hi)&#123;</span><br><span class="line">  <span class="keyword">while</span>(++lo &lt; hi)&#123;<span class="comment">//从左向右，逐一检查各对相邻元素</span></span><br><span class="line">    <span class="keyword">if</span>( _elem[lo<span class="number">-1</span>] &gt; _elem[lo] )<span class="comment">//若逆序</span></span><br><span class="line">      swap( _elem[lo<span class="number">-1</span>], _elem[lo]);<span class="comment">//交换</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Bubblesort-提前终止">Bubblesort: 提前终止</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="keyword">void</span> Vector&lt;T&gt;:: bubbleSort ( Rank lo, Rank hi)&#123;</span><br><span class="line">  <span class="keyword">while</span>( ! bubble( lo, hi--))<span class="comment">//逐趟做扫描交换</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="keyword">bool</span> Vector&lt;T&gt;:: bubble( Rank lo, Rank hi)&#123;</span><br><span class="line">  <span class="keyword">bool</span> sorted = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">while</span>(++lo &lt; hi)&#123;<span class="comment">//从左向右，逐一检查各对相邻元素</span></span><br><span class="line">    <span class="keyword">if</span>( _elem[lo<span class="number">-1</span>] &gt; _elem[lo] )&#123;<span class="comment">//若逆序</span></span><br><span class="line">      sorted = <span class="literal">false</span>;</span><br><span class="line">      swap( _elem[lo<span class="number">-1</span>], _elem[lo]);<span class="comment">//交换</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sorted;<span class="comment">//整体有序</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Bubblesort-跳过无效起泡">Bubblesort: 跳过无效起泡</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="keyword">void</span> Vector&lt;T&gt;:: bubbleSort ( Rank lo, Rank hi)&#123;</span><br><span class="line">  <span class="keyword">while</span>( lo &lt; ( hin = bubble( lo, hi)))<span class="comment">//逐趟做扫描交换,直至全序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="keyword">bool</span> Vector&lt;T&gt;:: bubble( Rank lo, Rank hi)&#123;</span><br><span class="line">  Rank last = lo;</span><br><span class="line">  <span class="keyword">while</span>(++lo &lt; hi)&#123;<span class="comment">//从左向右，逐一检查各对相邻元素</span></span><br><span class="line">    <span class="keyword">if</span>( _elem[lo<span class="number">-1</span>] &gt; _elem[lo] )&#123;<span class="comment">//若逆序</span></span><br><span class="line">      last = lo;<span class="comment">//更新最右侧逆序对位置记录，并</span></span><br><span class="line">      swap( _elem[lo<span class="number">-1</span>], _elem[lo]);<span class="comment">//交换</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> last;<span class="comment">//逆序对均在last以左</span></span><br></pre></td></tr></table></figure><h2 id="Selection-Sort">Selection Sort</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T,<span class="keyword">int</span> size&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T(&amp;<span class="built_in">array</span>)[size])</span><span class="comment">//数组排序模版</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)<span class="comment">//从第一个开始遍历数组size次，默认将第一个视为最小元素；</span></span><br><span class="line">    &#123;</span><br><span class="line">        T min=<span class="built_in">array</span>[i];<span class="comment">//暂时将当前元素当作最小值</span></span><br><span class="line">        <span class="keyword">int</span> k=i;<span class="comment">//记录当前地址</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;size;j++)<span class="comment">//遍历未排序元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">array</span>[j]&lt;min)<span class="comment">//如果未排序元素中有比当前值还小的</span></span><br><span class="line">            &#123;</span><br><span class="line">                min=<span class="built_in">array</span>[j];<span class="comment">//更新最小值</span></span><br><span class="line">                k=j;<span class="comment">//更新最小值地址</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k!=i)<span class="comment">//当一遍循环结束后如果最小元素不是当前值，将最小元素与当前值进行交换</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">array</span>[k]=<span class="built_in">array</span>[i];</span><br><span class="line">            <span class="built_in">array</span>[i]=min;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「liqiluan」的原创文章，遵循 CC <span class="number">4.0</span> BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/qq_39352109/article/details/88378108</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="QuickSelect">QuickSelect</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">quickSelect</span><span class="params">( Vector&lt;T&gt; &amp; A, Rank k)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(Rank lo = <span class="number">0</span>, hi = A.size() -  <span class="number">1</span>; lo &lt; hi; )&#123;</span><br><span class="line">    Rank i = lo, j = hi; T pivot = A[lo];</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">      <span class="keyword">while</span>( pivot &lt;= A[j] )&#123; j--; A[i] = A[j];&#125;</span><br><span class="line">      <span class="keyword">while</span>( A[i] &lt;= pivot ) &#123; i++; A[j] = A[i];&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A[i] = pivot;</span><br><span class="line">    <span class="keyword">if</span>( k &lt;= i ) hi = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( i &lt;= k ) lo = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序">归并排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100001</span>],temp[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bin</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    bin(l,mid);</span><br><span class="line">    bin(mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">int</span> i=l,j=mid+<span class="number">1</span>,k=l;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=r) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=a[j]) &#123;</span><br><span class="line">            temp[k]=a[i];</span><br><span class="line">            k++,i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            temp[k]=a[j];</span><br><span class="line">            k++,j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[k]=a[i];</span><br><span class="line">        k++,i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[k]=a[j];</span><br><span class="line">        k++,j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line">        a[i]=temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    bin(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原文地址：https://www.cnblogs.com/qseer/p/9419949.html</span></span><br></pre></td></tr></table></figure><h2 id="计数排序">计数排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> range 10000</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CountingSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">b[a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="keyword">while</span>(b[i]!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[cnt++]=i;</span><br><span class="line">b[i]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">clock_t</span> start,end;</span><br><span class="line">start=clock();</span><br><span class="line">freopen(<span class="string">&quot;out_arr.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;out_计数排序.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> a[range],b[range]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;range;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">CountingSort(a,b,range);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;range;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d &quot;</span>,a[i]);</span><br><span class="line"><span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">50</span>==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">end=clock();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;计数排序耗时：%dms\n&quot;</span>,(<span class="keyword">float</span>)(end-start)*<span class="number">1000.0</span>/CLOCKS_PER_SEC);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「生于忧患，死于安乐<span class="number">2017</span>」的原创文章，遵循 CC <span class="number">4.0</span> BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/qq_41325698/article/details/88095563</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>木块问题</title>
      <link href="2020/01/09/%E6%9C%A8%E5%9D%97%E9%97%AE%E9%A2%98/"/>
      <url>2020/01/09/%E6%9C%A8%E5%9D%97%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>输入n，得到编号为0 —- n-1的木块，分别摆放在顺序排列编号为0 – n-1的位置。现对这些木块进行操作，操作分为四种。</p><p>1、move a onto b：把木块a、b上方的木块放回各自的原位，再把a放到b上；</p><p>2、move a over b：把a上方的木块放回各自的原位，再把a放到b所在的木块的堆的上面；</p><p>3、pile a onto b：把b上方的木块放回各自的原位，再把a连同a上的木块整体移到b上；</p><p>4、pile a over b：把a连同a上方木块移到b所在的木块的堆的上面。</p><p>当输入quit时，结束操作并输出0~n-1的位置上的木块情况</p><h2 id="Sample-Input">Sample Input</h2><p>10<br>move 9 onto 1<br>move 8 over 1<br>move 7 over 1<br>move 6 over 1<br>pile 8 over 6<br>pile 8 over 5<br>move 2 over 1<br>move 4 over 9<br>quit</p><h2 id="Sample-Output">Sample Output</h2><p>0: 0<br>1: 1 9 2 4<br>2:<br>3: 3<br>4:<br>5: 5 8 7 6<br>6:<br>7:<br>8:<br>9:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pile[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//找木块a所在的pile和height， 以引用的形式返回调用者</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_block</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>&amp; p, <span class="keyword">int</span>&amp; h)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> ( p = <span class="number">0</span>; p &lt; n; p++)</span><br><span class="line"><span class="keyword">for</span> ( h = <span class="number">0</span>; h &lt; pile[p].size(); h++)</span><br><span class="line"><span class="keyword">if</span> (pile[p][h] == a) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把第p堆高度为h的木块上方的所有木块移回原位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_above</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h + <span class="number">1</span>; i &lt; pile[p].size(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> b = pile[p][i];</span><br><span class="line">pile[b].push_back(b);</span><br><span class="line">&#125;</span><br><span class="line">pile[p].resize(h + <span class="number">1</span>); <span class="comment">//只保留下标0~h的元素  .resize()改变大小</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把第p堆高度为h及其上方的木块整体移动到p2堆的顶部</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pile_onto</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> h, <span class="keyword">int</span> p2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; pile[p].size(); i++)</span><br><span class="line">pile[p2].push_back(pile[p][i]);</span><br><span class="line">pile[p].resize(h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:&quot;</span>, i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pile[i].size(); j++) <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, pile[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">string</span> s1, s2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) pile[i].push_back(i);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; a &gt;&gt; s2 &gt;&gt; b) &#123;</span><br><span class="line"><span class="keyword">int</span> pa, pb, ha, hb;</span><br><span class="line">find_block(a, pa, ha);</span><br><span class="line">find_block(b, pb, hb);</span><br><span class="line"><span class="keyword">if</span> (pa == pb) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (s2 == <span class="string">&quot;onto&quot;</span>) clear_above(pb, hb);</span><br><span class="line"><span class="keyword">if</span> (s1 == <span class="string">&quot;move&quot;</span>) clear_above(pa, ha);</span><br><span class="line">pile_onto(pa, ha, pb);</span><br><span class="line">&#125;</span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
